
package service;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SqlServiceWithError", targetNamespace = "http://Service/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SqlServiceWithError {


    /**
     * 
     * @param data
     * @return
     *     returns java.lang.String
     * @throws BadFormatException
     * @throws IdNotFoundException
     */
    @WebMethod(operationName = "UpdateData")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "UpdateData", targetNamespace = "http://Service/", className = "service.UpdateData")
    @ResponseWrapper(localName = "UpdateDataResponse", targetNamespace = "http://Service/", className = "service.UpdateDataResponse")
    @Action(input = "http://Service/SqlServiceWithError/UpdateDataRequest", output = "http://Service/SqlServiceWithError/UpdateDataResponse", fault = {
        @FaultAction(className = BadFormatException.class, value = "http://Service/SqlServiceWithError/UpdateData/Fault/BadFormatException"),
        @FaultAction(className = IdNotFoundException.class, value = "http://Service/SqlServiceWithError/UpdateData/Fault/IdNotFoundException")
    })
    public String updateData(
        @WebParam(name = "data", targetNamespace = "")
        SimpleData data)
        throws BadFormatException, IdNotFoundException
    ;

    /**
     * 
     * @param idData
     * @return
     *     returns java.lang.String
     * @throws IdNotFoundException
     */
    @WebMethod(operationName = "DeleteData")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "DeleteData", targetNamespace = "http://Service/", className = "service.DeleteData")
    @ResponseWrapper(localName = "DeleteDataResponse", targetNamespace = "http://Service/", className = "service.DeleteDataResponse")
    @Action(input = "http://Service/SqlServiceWithError/DeleteDataRequest", output = "http://Service/SqlServiceWithError/DeleteDataResponse", fault = {
        @FaultAction(className = IdNotFoundException.class, value = "http://Service/SqlServiceWithError/DeleteData/Fault/IdNotFoundException")
    })
    public String deleteData(
        @WebParam(name = "idData", targetNamespace = "")
        int idData)
        throws IdNotFoundException
    ;

    /**
     * 
     * @param data
     * @return
     *     returns java.util.List<service.SimpleData>
     * @throws BadFormatException
     */
    @WebMethod(operationName = "SelectData")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "SelectData", targetNamespace = "http://Service/", className = "service.SelectData")
    @ResponseWrapper(localName = "SelectDataResponse", targetNamespace = "http://Service/", className = "service.SelectDataResponse")
    @Action(input = "http://Service/SqlServiceWithError/SelectDataRequest", output = "http://Service/SqlServiceWithError/SelectDataResponse", fault = {
        @FaultAction(className = BadFormatException.class, value = "http://Service/SqlServiceWithError/SelectData/Fault/BadFormatException")
    })
    public List<SimpleData> selectData(
        @WebParam(name = "data", targetNamespace = "")
        SimpleData data)
        throws BadFormatException
    ;

    /**
     * 
     * @param data
     * @return
     *     returns java.lang.String
     * @throws BadFormatException
     */
    @WebMethod(operationName = "InsertData")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "InsertData", targetNamespace = "http://Service/", className = "service.InsertData")
    @ResponseWrapper(localName = "InsertDataResponse", targetNamespace = "http://Service/", className = "service.InsertDataResponse")
    @Action(input = "http://Service/SqlServiceWithError/InsertDataRequest", output = "http://Service/SqlServiceWithError/InsertDataResponse", fault = {
        @FaultAction(className = BadFormatException.class, value = "http://Service/SqlServiceWithError/InsertData/Fault/BadFormatException")
    })
    public String insertData(
        @WebParam(name = "data", targetNamespace = "")
        SimpleData data)
        throws BadFormatException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "uploadImage", targetNamespace = "http://Service/", className = "service.UploadImage")
    @ResponseWrapper(localName = "uploadImageResponse", targetNamespace = "http://Service/", className = "service.UploadImageResponse")
    @Action(input = "http://Service/SqlServiceWithError/uploadImageRequest", output = "http://Service/SqlServiceWithError/uploadImageResponse")
    public String uploadImage(
        @WebParam(name = "arg0", targetNamespace = "")
        byte[] arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns byte[]
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "downloadImage", targetNamespace = "http://Service/", className = "service.DownloadImage")
    @ResponseWrapper(localName = "downloadImageResponse", targetNamespace = "http://Service/", className = "service.DownloadImageResponse")
    @Action(input = "http://Service/SqlServiceWithError/downloadImageRequest", output = "http://Service/SqlServiceWithError/downloadImageResponse")
    public byte[] downloadImage(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

}
